// This is a sample of DNSProxy config file
// You can use this sample to create your config file
{
	// DNSProxy server configuration
	"settings": {
		// should DNSProxy support TCP lookup from client?
		"tcp": true,
		// should DNSProxy support UDP lookup from client?
		"udp": true,
		// which IP to bind the DNSProxy server?
		"host": "::",
		// which port to listen the client request?
		"port": 53,
		// when to close upstream lookup if no data response?
		"timeout": 5000 // ms
	},
	// available name server list
	"servers": {
		// set name server with a name
		// you don't need to set name servers here
		// but at least a `default` one is required
		"default": {
			// name server host
			"host": "127.0.0.1",
			// name server port
			// if you emit port, it'll be `53`
			"port": "53",
			// name server protocol, `tcp`, `udp` or `tls`
			// if you emit protocol, it'll be `udp`
			"type": "udp"
		},
		// another name server
		"tcp": {
			// you can combine host and port as host
			"host": "127.0.0.1:53",
			// don't set port again, or it'll overwrite the previous one
			"type": "tcp"
		},
		"ipv6": {
			// if you're using IPv6 server, quote IP address with []
			// or it'll be parsed as combined host and port
			"host": "[::1]:53"
		},
		"tls": {
			// DNS-over-TLS lookup is supported
			"host": "127.0.0.1",
			// if you emit port, it'll be `853` for `tls`
			"port": "853",
			"type": "tls"
		},
		// you can use a plain string instead of an object
		// scheme is `<ip>[:<port = 53>][@<protocol = udp>]`
		"google-tcp": "8.8.8.8:443@tcp",
		"google-ipv6": "[2001:4860:4860::8888]",
		"cloudflare-tls": "1.1.1.1@tls",
		// you can also use domain for TLS lookup,
		// but please be aware that looking up the server IP is not
		// controlled by DNSProxy but by libuv's operating system API,
		// so the IP is probably not what you want (you know what I mean)
		"quad9-tls": "dns.quad9.net@tls"
	},
	// extend rule parsers
	// you can import some other parsers written by you or some other guy
	// then you can use them in `rules`
	// note if you're using Windows, use slash (/) or two backslashes (\\)
	"extend-parsers": [
		"path/to/parser.js",
		"path\\to\\another\\parser.js",
		// you can use vertical bar (|) after path to rename it, it's useful
		// if you don't know its name or another parser uses the same name
		// the original name of parser will be replaced by your new name
		"path/to/renamed/parser.js|new-name",
		// you can use `npm:` before path to import from a npm package
		// you can use its original name to use the parser
		// or use `npm:<package-name>` to use the parser
		"npm:dnsproxy-npm-parser",
		// you can also rename a npm package to overwrite its original name
		// e.g. you can use either `npm:dnsproxy-npm-another-parser` or
		// `another-parser` to use the parser
		"npm:dnsproxy-npm-another-parser|another-parser"
	],
	// look up rules
	// which rule defines first, which rule has a higher priority
	// if no rule matches, it'll use the default one
	"rules": [{
		// rule input file
		"file": "rules/common.txt",
		// rule type
		"type": "list",
		// rule lookup server
		// if you defined it at `servers`, you can use it he
		"server": "tcp"
	}, {
		"file": "rules/extend.txt",
		"type": "list",
		// you can also define a custom name server here
		"server": {
			"host": "127.0.0.2",
			"port": "53",
			"type": "tcp"
		}
	}, {
		// TODO: PAC file, thought it's a JavaScript file
		"file": "rules/proxy.pac",
		// TODO: support pac is coming soom
		"type": "pac",
		// also you can use a plain string 
		"server": "10.0.0.1"
	}, {
		// TODO: URL, support URL maybe coming soom
		"url": "https://example.com/proxy.txt",
		// TODO: support autoproxy is coming soom
		"type": "autoproxy",
		"server": "[::1]:5353@tcp"
	}, {
		// TODO: advance, advance is a custom rule
		// you can specify any rules with any name server
		"file": "rules/advance.json",
		"type": "advance"
	}, {
		// use the parser defined in `extend-parser`
		"file": "rules/foo.txt",
		"type": "new-name"
	}, {
		// use the npm package defined in `extend-parser`
		"file": "rules/bar.txt",
		"type": "npm:dnsproxy-npm-another-parser",
		"config": "some other fields required by custom parser"
	}]
}